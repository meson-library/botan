#!/bin/bash

process_cmd()
{
    local total_args=$#
    local show_help_arg=false
    local configure_ninja_project_arg=false
    local configure_vs2019_project_arg=false
    local show_project_cfg_arg=false
    local build_examples_arg=false
    local build_docs_arg=false

    while [[ $# > 0 ]]; do
        case $1 in
            -h|--help)
                show_help_arg=true
            ;;
            --ninja)
                configure_ninja_project_arg=true
            ;;
            --vs2019)
                configure_vs2019_project_arg=true
            ;;
            --show-cfg)
                show_project_cfg_arg=true
            ;;
            --build-examples)
                build_examples_arg=true
            ;;
            --build-docs)
                build_docs_arg=true
            ;;
        esac
        shift
    done

    if [[ $show_help_arg == true ]] || [[ $total_args == 0 ]]
    then
        show_help
    else
        main
    fi

    exit 0
}


main()
{
    if [[ $configure_ninja_project_arg == true && $configure_vs2019_project_arg == true ]]
    then
        echo "The supplied arguments '--ninja' and '--vs2019' are mutually exclusive."
        exit -1
    fi

    if [[ $configure_ninja_project_arg == false && $configure_vs2019_project_arg == false && $show_project_cfg_arg == true ]]
    then
        echo "When passing the '--show-cfg' argument we need to pass the type of project we want to show the settings for. They can be '--ninja' or '--vs2019'."
        exit -1
    fi

    if [[ $configure_ninja_project_arg == false && $configure_vs2019_project_arg == false && ($build_examples_arg == true || $build_docs_arg == true)]]
    then
        echo "When passing the '--build-examples' or '--build-docs' arguments we need to pass the type of project we want to affect. They can be '--ninja' or '--vs2019'."
        exit -1
    fi

    if [[ $build_for_os == windows ]]
    then
        root_path=`cygpath -w "$root_path"`
    fi

    local base_path="${root_path}build/${build_for_os:0:3}_${build_for_arch}_${build_for_type}_${build_for_link}"
    local projects_folder="projects"
    local artifact_folder="artifact"

    local project_type=''
    if [[ $configure_ninja_project_arg == true ]]
    then
        project_type='ninja'
    elif [[ $configure_vs2019_project_arg == true ]]
    then
        project_type='vs2019'
    fi

    if [[ $show_project_cfg_arg == true ]]
    then
        show_project_cfg
    elif [[ $configure_ninja_project_arg == true || $configure_vs2019_project_arg == true ]]
    then
        configure_project
    else
        echo 'An invalid argument was supplied!'
    fi
}


show_project_cfg()
{
    local project_path="$base_path/$projects_folder/$project_type"
    if [[ -d $project_path ]]
    then
        meson configure "$project_path"
    else
        echo 'Project not configured. First configure the project before executing this command.'
    fi
}


configure_project()
{
    local project_path="$base_path/$projects_folder/$project_type"
    local artifact_path="$base_path/$artifact_folder/$project_type"
    if [[ ! -d $project_path ]]
    then
        meson setup "$project_path" --buildtype $build_for_type \
            --default-library $build_for_link --backend $project_type --prefix "$artifact_path" \
            -Dbuild_examples=$build_examples_arg -Dbuild_docs=$build_docs_arg
    else
        meson setup "$project_path" --reconfigure --buildtype $build_for_type \
            --default-library $build_for_link --backend $project_type --prefix "$artifact_path" \
            -Dbuild_examples=$build_examples_arg -Dbuild_docs=$build_docs_arg
    fi
}


show_help()
{
    script_name=$(basename "$0")
    echo "#######################################################################"
    echo "#                                                                     #"
    echo "#                        PROJECT CONFIGURATOR                         #"
    echo "#                                                                     #"
    echo "# USAGE:                                                              #"
    echo "#     $script_name {-h|--help | [--ninja|--vs2019             #"
    echo "#                      [--show-cfg] [--build-examples]                #"
    echo "#                      [--build-docs]]}                               #"
    echo "#                                                                     #"
    echo "# EXAMPLES:                                                           #"
    echo "#     $script_name -h                                         #"
    echo "#     $script_name --ninja                                    #"
    echo "#     $script_name --ninja  --build-docs                      #"
    echo "#     $script_name --ninja --show-cfg                         #"
    echo "#                                                                     #"
    echo "# ARGUMENTS:                                                          #"
    echo "#     -h|--help    Print this help and exit.                          #"
    echo "#                                                                     #"
    echo "#     --ninja    Configure a Ninja project.                           #"
    echo "#                                                                     #"
    echo "#     --vs2019    Configure a Visual Studio 2019 project.             #"
    echo "#                                                                     #"
    echo "#     --show-cfg    Show the project configurations and exit.         #"
    echo "#                                                                     #"
    echo "#     --build-examples    Configure build targets for example         #"
    echo "#         programs.                                                   #"
    echo "#                                                                     #"
    echo "#     --build-docs    Configure build targets for the documentation.  #"
    echo "#                                                                     #"
    echo "#######################################################################"
}


command_line_args=("$@")
process_cmd ${command_line_args[@]}
