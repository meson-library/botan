#!/bin/bash

process_cmd()
{
    local total_args=$#
    local show_help_arg=false
    local remove_artifacts_arg=false
    local clean_ninja_project_arg=false
    local clean_vs2019_project_arg=false

    while [[ $# > 0 ]]
    do
        case $1 in
            -h|--help)
                show_help_arg=true
            ;;
            -r|--remove-artifacts)
                remove_artifacts_arg=true
            ;;
            --ninja)
                clean_ninja_project_arg=true
            ;;
            --vs2019)
                clean_vs2019_project_arg=true
            ;;
        esac
        shift
    done

    if [[ $show_help_arg == true ]] || [[ $total_args == 0 ]]
    then
        show_help
    else
        main
    fi

    exit 0
}


main()
{
    if [[ $clean_ninja_project_arg == true && $clean_vs2019_project_arg == true ]]
    then
        echo "The supplied arguments '--ninja' and '--vs2019' are mutually exclusive."
        exit -1
    fi

    if [[ $clean_ninja_project_arg == false && $clean_vs2019_project_arg == false && $remove_artifacts_arg == true ]]
    then
        echo "When passing the '-r|--remove-artifacts' argument we need to pass the type of project we want to affect. They can be '--ninja' or '--vs2019'."
        exit -1
    fi

    if [[ $build_for_os == windows ]]
    then
        root_path=`cygpath -w "$root_path"`
    fi

    local base_path="${root_path}build/${build_for_os:0:3}_${build_for_arch}_${build_for_type}_${build_for_link}"
    local projects_folder="projects"
    local artifact_folder="artifact"

    if [[ $clean_ninja_project_arg == true ]]
    then
        local project_type='ninja'
        clean_project
    elif [[ $clean_vs2019_project_arg == true ]]
    then
        local project_type='vs2019'
        clean_project
    else
        echo 'An invalid argument was supplied!'
    fi
}


clean_project()
{
    local project_path="$base_path/$projects_folder/$project_type"
    local artifact_path="$base_path/$artifact_folder/$project_type"
    if [[ -d $project_path ]]
    then
        meson compile -C "$project_path" --clean

        if [[ -d $artifact_path ]] && [[ $remove_artifacts_arg == true ]]
        then
            rm -rf "$artifact_path"
        fi
    else
        echo 'Project not configured. First configure the project before executing this command.'
    fi
}


show_help()
{
    script_name=$(basename "$0")
    echo "#######################################################################"
    echo "#                                                                     #"
    echo "#                        PROJECT CLEANER                              #"
    echo "#                                                                     #"
    echo "# USAGE:                                                              #"
    echo "#     $script_name {-h|--help | [--ninja [-r|--remove-artifacts]]  #"
    echo "#                      [--vs2019 [-r|--remove-artifacts]]}            #"
    echo "#                                                                     #"
    echo "# EXAMPLES:                                                           #"
    echo "#     $script_name -h                                              #"
    echo "#     $script_name --ninja                                         #"
    echo "#     $script_name --ninja  -r                                     #"
    echo "#     $script_name --ninja  --remove-artifacts                     #"
    echo "#                                                                     #"
    echo "# ARGUMENTS:                                                          #"
    echo "#     -h|--help    Print this help and exit.                          #"
    echo "#                                                                     #"
    echo "#     --ninja    Clean Ninja projects.                                #"
    echo "#                                                                     #"
    echo "#     --vs2019    Clean Visual Studio 2019 projects.                  #"
    echo "#                                                                     #"
    echo "#     -r|--remove-artifacts    Remove the corresponding artifacts     #"
    echo "#         directory.                                                  #"
    echo "#                                                                     #"
    echo "#######################################################################"
}


command_line_args=("$@")
process_cmd ${command_line_args[@]}
