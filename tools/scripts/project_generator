#!/bin/bash

process_cmd()
{
    local total_args=$#
    local show_help_arg=false
    local generate_ninja_project_arg=false
    local generate_vs2019_project_arg=false

    while [[ $# > 0 ]]; do
        case $1 in
            -h|--help)
                show_help_arg=true
            ;;
            --ninja)
                generate_ninja_project_arg=true
            ;;
            --vs2019)
                generate_vs2019_project_arg=true
            ;;
        esac
        shift
    done

    if [[ $show_help_arg == true ]] || [[ $total_args == 0 ]]
    then
        show_help
    elif [[ $generate_ninja_project_arg == true ]] || [[ $generate_vs2019_project_arg == true ]]
    then
        main $generate_ninja_project_arg $generate_vs2019_project_arg
    fi

    exit 0
}


main()
{
    local generate_ninja_project_arg=$1
    local generate_vs2019_project_arg=$2

    if [[ $build_for_os == windows ]]
    then
        current_folder=`cygpath -w "$current_folder"`
    fi

    local base_path="${current_folder}build/${build_for_os:0:3}_${build_for_arch}_${build_for_type}"
    local projects_folder="projects"
    local artifact_folder="artifact"

    if [[ $generate_ninja_project_arg == true ]]
    then
        generate_ninja_project "$base_path" $projects_folder $artifact_folder
    fi

    if [[ $generate_vs2019_project_arg == true ]]
    then
        generate_vs2019_project "$base_path" $projects_folder $artifact_folder
    fi
}


generate_ninja_project()
{
    local base_path="$1"
    local projects_folder=$2
    local artifact_folder=$3

    local ninja_project_folder="$base_path/$projects_folder/ninja"
    local ninja_artifact_folder="$base_path/$artifact_folder/ninja"
    if [[ ! -d $ninja_project_folder ]]
    then
        meson setup "$ninja_project_folder" --buildtype $build_for_type --default-library static \
            --backend ninja --prefix "$ninja_artifact_folder" -Dbuild_examples=true -Dbuild_docs=false -Dbuild_tests=true
    fi
}


generate_vs2019_project()
{
    local base_path="$1"
    local projects_folder=$2
    local artifact_folder=$3

    local vs2019_project_folder="$base_path/$projects_folder/vs2019"
    local vs2019_artifact_folder="$base_path/$artifact_folder/vs2019"
    if [[ ! -d $vs2019_project_folder ]]
    then
        meson setup "$vs2019_project_folder" --buildtype $build_for_type  --default-library static \
            --backend vs2019  --prefix "$vs2019_artifact_folder" -Dbuild_examples=true -Dbuild_docs=false -Dbuild_tests=true
    fi
}


show_help()
{
    script_name=$(basename "$0")
    echo "#######################################################################"
    echo "#                                                                     #"
    echo "#                        PROJECT GENERATOR                            #"
    echo "#                                                                     #"
    echo "# USAGE:                                                              #"
    echo "#     $script_name {-h|--help | [--ninja] [--vs2019]}            #"
    echo "#                                                                     #"
    echo "# ARGUMENTS:                                                          #"
    echo "#     -h|--help    Print this help and exit.                          #"
    echo "#                                                                     #"
    echo "#     --ninja    Generate Ninja projects.                             #"
    echo "#                                                                     #"
    echo "#     --vs2019    Generate Visual Studio 2019 projects.               #"
    echo "#                                                                     #"
    echo "#######################################################################"
}


command_line_args=("$@")
process_cmd ${command_line_args[@]}
